Description: Optimizing on AWS Challenge

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2

  DBInstanceMasterPassword:
    NoEcho: true
    Description: Any printable ASCII character except "/", """, or "@". Must contain 8 to 41 characters.
    Type: String

Resources:

############################################################################
#
#   Webserver security group, role and autoscaling
#
############################################################################

  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: dynamo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                Resource: '*'

  RootInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "RootRole"


  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref 'VPC'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
              wget: []
              python36: []
              python36-devel: []
              gcc: []
          sources:
            /webapp/app: "https://us-west-2-tcdev.s3.amazonaws.com/courses/AWS-100-ADO/v1.0.0/exercises/challenge-flask.zip"
            /etc/nginx: "https://us-west-2-tcdev.s3.amazonaws.com/courses/AWS-100-ADO/v1.0.0/exercises/challenge-nginx.zip"
          files:
            /etc/init/uwsgi.conf:
              content: !Sub |
                  # file: /etc/init/uwsgi.conf
                  description "uWSGI server"

                  start on runlevel [2345]
                  stop on runlevel [!2345]

                  respawn
                  exec /usr/local/bin/uwsgi --ini /webapp/app/FlaskApp/app.ini
            /webapp/app/FlaskApp/app.ini:
              content: !Sub |
                  [uwsgi]
                  chdir = /webapp/app/FlaskApp
                  module = application:application
                  uid = nginx
                  gid = nginx
                  socket = /tmp/uwsgiApp.sock
                  processes = 4
                  threads = 2
                  logto = /var/log/uwsgi.log

                  env = DATABASE_HOST=${Database.Endpoint.Address}
                  env = DATABASE_USER=master
                  env = DATABASE_PASSWORD=${DBInstanceMasterPassword}
                  env = DATABASE_DB_NAME=challenge
                  env = DYNAMODB_TABLE=${DynamoCustomers}
                  env = AWS_DEFAULT_REGION=${AWS::Region}
          commands:
            01_install_uwsgi:
              command: "pip-3.6 install uwsgi"
            02_install_packages:
              command: "pip-3.6 install -r /webapp/app/FlaskApp/requirements.txt"
            03_sed_static_location:
              # point the static content to the s3 bucket
              command: !Sub "sed -i s=/static/=https://${StaticBucket}.s3.amazonaws.com/static/=g /webapp/app/FlaskApp/templates/main.html"
            04_start_uwsgi:
              command: "start uwsgi"
            05_start_nginx:
              command: "service nginx restart"

          services:
            sysvinit:
              nginx:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/nginx/nginx.conf"
                sources:
                  - "/var/www/html"
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      IamInstanceProfile: !Ref RootInstanceProfile
      KeyName: !Ref 'KeyName'
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref 'WebServerSecurityGroup'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}

############################################################################
#
#   i think these setting are all fine - checking in the template (russ)
#
############################################################################

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '0'
      MaxSize: '5'
      DesiredCapacity: '1'
      TargetGroupARNs: [ !Ref 'DefaultTargetGroup' ]
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

############################################################################
#
#   Lambda / Custom resources
#
############################################################################

  PopulateDB:
    Type: Custom::PopulateDB
    DeletionPolicy: Retain
    Properties:
      ServiceToken: !GetAtt 'PopulateFunction.Arn'
      DBEndpointAddress: !GetAtt 'Database.Endpoint.Address'
      DBMasterPassword: !Ref DBInstanceMasterPassword

  PopulateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Populate Instance Security Group
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: PopulateSecurityGroup

  PopulateFunction:
    Type: AWS::Lambda::Function
    DependsOn: NATInstance
    Properties:
      Code:
        S3Bucket: !Sub "${AWS::Region}-tcdev"
        S3Key: courses/AWS-100-ADO/v1.0.0/exercises/populate_resource.zip
      Handler: main.handler
      MemorySize: '128'
      Role: !GetAtt 'PopulateRole.Arn'
      Runtime: python3.6
      Timeout: '90'
      VpcConfig:
        SecurityGroupIds:
          - !Ref PopulateSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  PopulateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*


############################################################################
#
#   Database resources
#
############################################################################

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DB Instance Security Group
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: DBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt 'WebServerSecurityGroup.GroupId'
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !GetAtt 'PopulateSecurityGroup.GroupId'


  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Challenge DB Subnet Group
      SubnetIds:
        - !Ref 'PrivateSubnet1'
        - !Ref 'PrivateSubnet2'

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: challenge
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      MasterUsername: master
      MasterUserPassword: !Ref DBInstanceMasterPassword
      MultiAZ: 'false'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      VPCSecurityGroups:
        - !Ref 'DBSecurityGroup'
      Tags:
        - Key: Name
          Value: Challenge DB Instance

############################################################################
#
#   S3 bucket static resources
#
############################################################################

  StaticBucket:
    Type: "AWS::S3::Bucket"

  StaticBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "StaticBucket"
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub "arn:aws:s3:::${StaticBucket}/static/*"
            Principal: "*"

  PopulateS3:
    Type: Custom::PopulateS3
    Properties:
      ServiceToken: !GetAtt 'PopulateS3Function.Arn'
      SourceZip: "https://us-west-2-tcdev.s3.amazonaws.com/courses/AWS-100-ADO/v1.0.0/exercises/ex-cr-s3contents.zip"
      DestinationBucket: !Ref StaticBucket

  PopulateS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          !Sub |
              import os
              import mimetypes
              import glob
              import zipfile
              import urllib.request
              import boto3
              import cfnresponse
              def handler(event, context):
                  if event["RequestType"] == "Delete":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, None)
                      return
                  response_status = cfnresponse.FAILED
                  response_data = {}
                  target_dir = "/tmp/zip_contents/"
                  # grab the zip
                  try:
                      source_zip = event["ResourceProperties"]["SourceZip"]
                      destination_bucket = event["ResourceProperties"]["DestinationBucket"]
                      urllib.request.urlretrieve(source_zip, "/tmp/zipfile.zip")
                      # unzip into the tmp folder
                      if not os.path.exists(target_dir):
                          os.makedirs(target_dir)
                      zip_file = zipfile.ZipFile("/tmp/zipfile.zip", "r")
                      zip_file.extractall(target_dir)
                      zip_file.close()
                      # copy the unzipped contents into the destination
                      s3 = boto3.client("s3")
                      for fil in glob.glob(target_dir + "**/*.*", recursive=True):
                          mime_type = mimetypes.guess_type(fil)
                          key = os.path.relpath(fil, target_dir)
                          print("Copying: %s" % key)
                          s3.put_object(
                              Body=open(fil, "rb"),
                              Bucket=destination_bucket,
                              Key=key,
                              ContentType=mime_type[0]
                          )
                      response_status = cfnresponse.SUCCESS
                  except Exception as e:
                      response_data["Error"] = "Failed populating bucket"
                      print(e)
                  cfnresponse.send(event, context, response_status, response_data)
      Handler: index.handler
      MemorySize: '128'
      Role: !GetAtt 'PopulateS3Role.Arn'
      Runtime: python3.6
      Timeout: '90'

  PopulateS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:Put*
                Resource: '*'

############################################################################
#
#   Dynamo table
#
############################################################################

  DynamoCustomers:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 5


############################################################################
#
#   Application load balancer
#
############################################################################

  LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      DependsOn: AttachGateway
      Properties:
          Subnets: [!Ref 'PublicSubnet1', !Ref 'PublicSubnet2']
          SecurityGroups:
              - !Ref WebServerSecurityGroup
          Tags:
              - Key: Name
                Value: ChallengeALB

  LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          LoadBalancerArn: !Ref LoadBalancer
          Port: 80
          Protocol: HTTP
          DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
          VpcId: !Ref VPC
          Port: 80
          Protocol: HTTP

############################################################################
#
#   VPC and NAT resources
#
############################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: edx-build-aws-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: edx-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.1.1.0/24
      VpcId: !Ref 'VPC'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: edx-subnet-public-a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: 10.1.2.0/24
      VpcId: !Ref 'VPC'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: edx-subnet-public-b

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: edx-routetable-public

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'

  PublicRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.1.3.0/24
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: edx-subnet-private-a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: 10.1.4.0/24
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: edx-subnet-private-b

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: edx-routetable-private

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref 'NATInstance'

  PrivateRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet1'

  PrivateRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet2'

  NATInstance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: !Ref 'KeyName'
      InstanceType: t2.micro
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref 'PublicSubnet2'
          GroupSet:
            - !Ref 'NATSecurityGroup'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: edx-nat-instance
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash \n"
            - "yum -y update \n"
            - "echo 1 > /proc/sys/net/ipv4/ip_forward \n"
            - "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects \n"
            - "/sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE\
              \ \n"
            - "/sbin/iptables-save > /etc/sysconfig/iptables \n"
            - "mkdir -p /etc/sysctl.d/ \n"
            - "cat <<EOF > /etc/sysctl.d/nat.conf \n"
            - "net.ipv4.ip_forward = 1 \n"
            - "net.ipv4.conf.eth0.send_redirects = 0 \n"
            - "EOF \n"

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: edx-nat-sg
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '1024'
          CidrIp: 10.1.3.0/24
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '1024'
          CidrIp: 10.1.4.0/24

Outputs:
  Website:
    Description: URL to site
    Value: !Sub 'http://${LoadBalancer.DNSName}'
